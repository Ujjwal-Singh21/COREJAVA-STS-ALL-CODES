Enumeration
-------------
package com.Java8.collectionframeworks.Cursors;
import java.util.Enumeration;
import java.util.Vector;

// 1) Introduced in Version-1.0.
// 2) Not universal -> applicable only to Legacy Classes -> (Vector).
// 3) Can perform "read" operation only.
// 4) We can get it with help of Vector Object.
// 5) UniDirectional.
//-------------------------------------------------------------------
public class EnumerationDemo {
    public static void main(String[] args) {

        Vector<Integer> vector = new Vector<>();

        //adding Objects
        for (int i = 0; i <= 10; i++) {
            vector.addElement(i);
        }

        System.out.println("Initially: " + vector);

        //getting Enumeration
        Enumeration<Integer> enumeration = vector.elements();

        while (enumeration.hasMoreElements()) {
            Integer i = enumeration.nextElement();

            //getting only even numbers
            if (i % 2 == 0) {
                System.out.println("Only even numbers: " + i);
            }
        }
    }
}

---------------------------------------------------------------------------------

Iterator
--------
package com.Java8.collectionframeworks.Cursors;
import java.util.ArrayList;
import java.util.Iterator;

// 1) Introduced in Version-1.2.
// 2) Applicable universally for any Child classes of Collection(I).
// 3) Can perform both "read" & "remove" operations now.
// 4) To get it -> Collection(I) -> has iterator() method.
// 5) We can get it with help of Collection Object.
// 6) UniDirectional.
//--------------------------------------------------------------------
public class IteratorDemo {
    public static void main(String[] args) {

        ArrayList<Integer> arrayList = new ArrayList<>();

        //adding Objects
        for (int i = 0; i <= 10; i++) {
            arrayList.add(i);
        }

        System.out.println("Initially: " + arrayList);

        //getting Iterator
        Iterator<Integer> iterator = arrayList.iterator();

        //performing read and remove operations
        while (iterator.hasNext()) {

            Integer i = iterator.next();

            //getting only even numbers & removing odd numbers
            if (i % 2 == 0) {
                System.out.println("Using iterator: " + i);
            } else {
                iterator.remove();
            }

        }

        System.out.println("Final Print: " + arrayList);

    }
}

---------------------------------------------------------------------------------------
ListIterator
------------
package com.Java8.collectionframeworks.Cursors;
import java.util.ArrayList;
import java.util.ListIterator;

// 1) Introduced in Version-1.2 & Child Interface of Iterator(I)
// 2) Applicable only for any Child classes of List(I).
// 3) Can perform many operations now -> read, add, update, remove.
// 4) To get it -> List(I) -> has ListIterator() method.
// 5) We can get it with help of List Object.
// 6) Bi-Directional.
//---------------------------------------------------------------------------
public class ListIteratorDemo {
    public static void main(String[] args) {

        ArrayList<String> arrayList = new ArrayList<>();

        //adding
        arrayList.add("Steve");
        arrayList.add("Bruce");
        arrayList.add("Clarke");
        arrayList.add("Diana");

        System.out.println("Initially: " + arrayList);

        //getting ListIterator
        ListIterator<String> listIterator = arrayList.listIterator();

        //operations -> delete/remove, add, update respectively
        //forward
        while (listIterator.hasNext()) {
            String s = listIterator.next();

            if (s.equals("Steve")) {
                listIterator.remove();
            } else if (s.equals("Diana")) {
                listIterator.add("Stark");
            } else if (s.equals("Bruce")) {
                listIterator.set("Bruce Wayne");
            }
        }

        //backward
        while (listIterator.hasPrevious()) {
            String s = listIterator.previous();
            System.out.println("Previous: " + s);
        }

        //finally, printing after all operations
        System.out.println("Finally: " + arrayList);
    }
}
